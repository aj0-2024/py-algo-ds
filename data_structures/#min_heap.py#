"""
Implementation of the min heap
"""


class MinHeap(object):

    def __init__(self, input_list):
        self._orig_input = input_list
        self._heap = self._build_heap()

    def _build_heap(self):
        """Given a list, the method transforms the list to min heap following the property
        parent <= child
        """
        pass

    def _sift_up(self, start_index: int):
        """Given an index, moves the child to parent until the heap property is satisfied"""
        pass

    def _sift_down(self, start_index: int, end_index: int):
        """Given a index, moves the parent to child until the heap property is satisfied or end_index
        is reached"""
        pass

    def insert(self, value):
        """Insert a given value into the heap"""
        pass

    def remove(self):
        """Remove the minimum value in the heap"""
        pass

    def peek(self):
        """Returns the minimum value"""
        pass
